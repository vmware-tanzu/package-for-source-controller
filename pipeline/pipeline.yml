# yaml anchors for use later
anchors:
- &ytt-release
  get: ytt-release
  params: { globs: [ytt-linux-amd64] }
- &kapp-release
  get: kapp-release
  params: { globs: [kapp-linux-amd64] }
- &kbld-release
  get: kbld-release
  params: { globs: [kbld-linux-amd64] }
- &imgpkg-release
  get: imgpkg-release
  params: { globs: [imgpkg-linux-amd64] }
- &grype-release
  get: grype-release
  params: { globs: [grype_*_linux_amd64.tar.gz] }
- &yq-release
  get: yq-release
  params: { globs: [yq_linux_amd64] }
- &crane-release
  get: crane-release
  params: { globs: [go-containerregistry_Linux_x86_64.tar.gz] }

resource_types:
- name: github-release
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/concourse/github-release-resource
    tag: 1.7.0
- name: coverity
  type: registry-image
  source:
    repository: devtools-docker.artifactory.eng.vmware.com/vmware/runway/resourcetypes/coverity-resource
    tag: 2.2.1
- name: osspi
  type: registry-image
  source:
    repository: devtools-docker.artifactory.eng.vmware.com/vmware/runway/resourcetypes/oss-resource
    tag: 2.5.0

resources:
- name: flux-source-controller
  type: git
  source:
    tag_regex: v[0-9]+\.[0-9]+\.[0-9]+
    branch: main
    uri: https://github.com/fluxcd/source-controller.git

- name: ko-mirror
  type: git
  source:
    branch: main
    uri: https://gitlab.eng.vmware.com/core-build/mirrors_github_google_ko.git
    username: ((fluxcd.gitlab.username))
    password: ((fluxcd.gitlab.password))

- name: tce-packages
  type: git
  source:
    uri: https://github.com/vmware-tanzu/package-for-source-controller.git
    brach: main
    username: ((fluxcd.github.username))
    password: ((fluxcd.github.token))

- name: tce-packages-push
  type: git
  source:
    uri: https://github.com/vmware-tanzu/package-for-source-controller.git
    username: ((fluxcd.github.username))
    password: ((fluxcd.github.token))

- name: yq-release
  type: github-release
  source:
    owner: mikefarah
    repository: yq
    access_token: ((fluxcd.github.token))

- name: kind-on-c
  type: git
  source:
    uri: https://github.com/pivotal-k8s/kind-on-c
    password: ((fluxcd.github.token))

- name: kind-release
  type: github-release
  source:
    owner: kubernetes-sigs
    repository: kind
    access_token: ((fluxcd.github.token))

- name: kapp-controller-release
  type: github-release
  source:
    owner: vmware-tanzu
    repository: carvel-kapp-controller
    access_token: ((fluxcd.github.token))

- name: secretgen-controller-release
  type: github-release
  source:
    owner: vmware-tanzu
    repository: carvel-secretgen-controller
    access_token: ((fluxcd.github.token))

- name: tanzu-framework-release
  type: github-release
  source:
    owner: vmware-tanzu
    repository: tanzu-framework
    access_token: ((fluxcd.github.token))

- name: kind-node-image
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/kindest/node
    tag: v1.21.1

- name: kapp-release
  type: github-release
  source:
    owner: vmware-tanzu
    repository: carvel-kapp
    access_token: ((fluxcd.github.token))

jobs:
- name: create-flux-imgpkg-bundle
  plan:
  - get: flux-source-controller
    trigger: true
  - get: ko-mirror
  - get: tce-packages
  - load_var: tag_version
    file: flux-source-controller/.git/ref
  - task: setup-tools
    config:
      platform: linux
      image_resource:
        type: registry-image
        source: {repository: harbor-repo.vmware.com/tac-photon/golang, tag: 1.16}
      inputs: [{name: ko-mirror}]
      outputs: [{name: tools}]
      run:
        path: /bin/bash
        args:
          - -c
          - |
            set -ex

            export PATH="$PATH:$(pwd)/tools"

            # kbld + imgpkg
            curl -L https://carvel.dev/install.sh | K14SIO_INSTALL_BIN_DIR=tools bash
            kbld version
            imgpkg version

            # jq
            curl -L https://github.com/stedolan/jq/releases/latest/download/jq-linux64 -o tools/jq
            chmod +x tools/jq
            jq --version

            # yq
            # XXX: should this be mirrored? it's technincally only doing yaml processing
            go install github.com/mikefarah/yq/v4@latest
            cp $(which yq) tools/yq
            yq --version

            # ko
            cd ko-mirror
            go build -o ../tools/ko .


  - task: build-config-file
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: harbor-repo.vmware.com/dockerhub-proxy-cache/library/ubuntu
          tag: latest
      inputs:
      - name: flux-source-controller
      - name: tools
      outputs:
      - name: crds
      run:
        path: /bin/bash
        args:
          - -c
          - |
            set -ex

            export PATH="$PATH:$(pwd)/tools"

            apt-get update
            apt-get -y install wget libdigest-sha-perl curl

            # Install kustomize
            curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash

            mkdir crds/config
            mkdir kustomize-config

            cat > crds/config/config.yml <<EOL
            #@ load("@ytt:data", "data")
            ---
            EOL

            cat > crds/config/values.yml <<EOL
            #@data/values
            ---
            service_port: 80
            EOL

            # Adding kapp.yml to avoid Phanton diffs
            cat > crds/config/kapp.yml <<EOL
            apiVersion: kapp.k14s.io/v1alpha1
            kind: Config
            rebaseRules:
            - path: [status]
              type: copy
              sources: [existing]
              resourceMatchers:
              - allMatcher: {}
            EOL

            cat > kustomize-config/kustomization.yml <<EOL
            namespace: flux-system
            resources:
            - default-config.yml
            EOL

            # Add fluxcd prefix on RBAC to avoid conflicts with our custom source-controller
            cat >> flux-source-controller/config/rbac/kustomization.yaml <<EOL
            namePrefix: fluxcd-source-
            EOL

            ./kustomize build flux-source-controller/config/default > kustomize-config/default-config.yml

            ./kustomize build kustomize-config >> crds/config/config.yml

  - task: build-and-push-bundle
    privileged: true
    params:
        REGISTRY_HOSTNAME: ((fluxcd.tce_registry.hostname))
        REGISTRY_USERNAME: ((fluxcd.tce_registry.user))
        REGISTRY_PASSWORD: ((fluxcd.tce_registry.password))
        TAG_VERSION: ((.:tag_version))
    config:
      platform: linux
      image_resource:
        type: registry-image
        source: {repository: harbor-repo.vmware.com/tac-photon/golang, tag: 1.16}
      inputs:
      - name: flux-source-controller
      - name: ko-mirror
      - name: crds
      - name: tools
      outputs: [{name: output}]
      run:
        path: /bin/bash
        args:
          - -c
          - |
            set -ex

            export PATH="$PATH:$(pwd)/tools"

            # Avoid using docker login
            ko login -u "$REGISTRY_USERNAME" -p "$REGISTRY_PASSWORD" "$REGISTRY_HOSTNAME"

            # sed -i "s;image: fluxcd/source-controller;image: harbor-repo.vmware.com/fluxcd/source-controller;g" crds/config/config.yml

            mkdir crds/.imgpkg

            kbld -f crds/config/ --imgpkg-lock-output crds/.imgpkg/images.yml  > output/config.yml
            imgpkg push --registry-username="$REGISTRY_USERNAME" --registry-password="$REGISTRY_PASSWORD" -b "$REGISTRY_HOSTNAME/tce/fluxcd-source-controller-bundle:$TAG_VERSION" -f crds/ --lock-output output/bundle.yml

  - task: create-branch
    config:
      platform: linux
      image_resource:
        type: registry-image
        source: {repository: harbor-repo.vmware.com/tac-photon/git}
      params:
        TAG_VERSION: ((.:tag_version))
        GITHUB_TOKEN: ((fluxcd.github.token))
      inputs:
        - name: tce-packages
        - name: output
        - name: tools
      outputs: [{name: tce-packages}]
      run:
        path: /bin/bash
        args:
          - -c
          - |
            set -ex

            export PATH="$PATH:$(pwd)/tools"

            cat > template.yaml <<"EOF"
            #@ load("@ytt:data", "data")
            ---
            apiVersion: data.packaging.carvel.dev/v1alpha1
            kind: Package
            metadata:
              name: #@ "fluxcd.source.controller.community.tanzu.vmware.com." + data.values.version
            spec:
              refName: fluxcd.source.controller.community.tanzu.vmware.com
              version: #@ data.values.version
              releasedAt: #@ data.values.timestamp
              valuesSchema:
                openAPIv3:
                  properties: {}
              template:
                spec:
                  fetch:
                  - imgpkgBundle:
                      image: #@ data.values.bundle
                  template:
                  - ytt:
                      inline:
                        paths:
                          secretgen.yaml: |
                            #@ load("@ytt:overlay", "overlay")
                            ---
                            apiVersion: v1
                            kind: Secret
                            metadata:
                              name: canonical-registry-secret
                              namespace: flux-system
                              annotations:
                                secretgen.carvel.dev/image-pull-secret: ""
                            type: kubernetes.io/dockerconfigjson
                            data:
                              .dockerconfigjson: e30K
                            ---
                            #@overlay/match by=overlay.subset({"kind":"Deployment","metadata":{"name":"source-controller"}}),expects="1+"
                            ---
                            spec:
                              template:
                                spec:
                                  #@overlay/match missing_ok=True
                                  imagePullSecrets:
                                  - name: canonical-registry-secret
                      paths:
                        - "config/"
                  - kbld:
                      paths:
                      - "-"
                      - ".imgpkg/images.yml"
                      - "config/kapp.yml"
                  deploy:
                  - kapp: {}
            EOF


            version="$(echo $TAG_VERSION | tr -d v)"
            bundle="$(yq e '.bundle.image' output/bundle.yml)"
            timestamp="$(curl -L -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/fluxcd/source-controller/releases/tags/$TAG_VERSION | jq -r '.published_at')"

            cd tce-packages
            # generate package.yaml
            mkdir -p packages/fluxcd-source-controller/$version
            ytt -v version=$version -v bundle=$bundle -v timestamp=$timestamp -f ../template.yaml > packages/fluxcd-source-controller/$version/package.yaml

            # update tap-pkg to latest version
            # sed -i "s;constraints: .*;constraints: $version;g" tce-pkg/config/fluxcd-source-controller.yaml

            git config --global user.email "ci@localhost"
            git config --global user.name "CI Bot"

            git add -A
            git commit -m "bump package for fluxcd-source-controller $version"


  - put: tce-packages-push
    params:
      repository: tce-packages
      branch: fluxcd-source-controller/((.:tag_version))
      force: true

- name: test
  plan:
  - in_parallel:
    - get: flux-source-controller
    - get: ko-mirror
    - get: tce-packages
      resource: tce-packages-push
      trigger: true
      passed: [create-flux-imgpkg-bundle]
    - get: kind-on-c
    - get: kind-release
      params: { globs: [kind-linux-amd64] }
    - get: node-image
      resource: kind-node-image
      params: {format: oci}
    - get: kapp-controller-release
      params: { globs: [release.yml] }
    - get: secretgen-controller-release
      params: { globs: [release.yml] }
    - get: tanzu-framework-release
      params: { globs: [tanzu-framework-linux-amd64.tar.gz] }
    - *kapp-release
    - *yq-release
  - load_var: tag_version
    file: flux-source-controller/.git/ref
  - task: aggregate-inputs
    config:
      platform: linux
      image_resource:
        type: registry-image
        source: {repository: harbor-repo.vmware.com/dockerhub-proxy-cache/library/ubuntu}
      inputs:
        - name: secretgen-controller-release
        - name: tce-packages
        - name: kapp-controller-release
        - name: tanzu-framework-release
        - name: flux-source-controller
        - name: kapp-release
        - name: yq-release
      outputs: [{name: inputs}]
      run:
        path: tce-packages/pipeline/tasks/scripts/aggregate-inputs.sh

  - task: test-installation
    privileged: true
    file: kind-on-c/kind.yaml
    params:
      KIND_PRE_START: inputs/tce-packages/hack/configure-kind.sh
      KIND_TESTS: |
        set -e

        cd inputs
        source tce-packages/hack/_helpers.sh

        install_prereqs '((fluxcd.tap_registry.user))' '((fluxcd.tap_registry.token))'

        new_version="$(version_from_semver ((.:tag_version)))"

        echo "Testing Install"
        install_package "fluxcd-source-controller" "fluxcd.source.controller.community.tanzu.vmware.com" $new_version

        echo "Testing Uninstall"
        delete_package "fluxcd-source-controller"

  - task: test-smoke
    privileged: true
    file: kind-on-c/kind.yaml
    params:
      KIND_PRE_START: inputs/tce-packages/hack/configure-kind.sh
      KIND_TESTS: |
        set -e

        cd inputs

        source tce-packages/hack/_helpers.sh

        CREATE_CLUSTER="${CREATE_CLUSTER:-true}"
        KIND_CLUSTER_NAME="${KIND_CLUSTER_NAME:-kind}"
        LOAD_IMG_INTO_KIND="${LOAD_IMG_INTO_KIND:-true}"
        BUILD_PLATFORM="${BUILD_PLATFORM:-linux/amd64}"
        MINIO_HELM_VER="${MINIO_HELM_VER:-v6.3.1}"
        MINIO_TAG="${MINIO_TAG:-RELEASE.2020-09-17T04-49-20Z}"

        IMG=test/source-controller
        TAG=latest

        MC_RELEASE=mc.RELEASE.2021-12-16T23-38-39Z
        MC_AMD64_SHA256=d14302bbdaa180a073c1627ff9fbf55243221e33d47e32df61a950f635810978
        MC_ARM64_SHA256=00791995bf8d102e3159e23b3af2f5e6f4c784fafd88c60161dcf3f0169aa217

        pushd flux-source-controller
          ROOT_DIR="$(git rev-parse --show-toplevel)"
        popd

        BUILD_DIR="${ROOT_DIR}/build"

        echo "Installing tanzu prerequisits"
        install_prereqs '((fluxcd.tap_registry.user))' '((fluxcd.tap_registry.token))'

        new_version="$(version_from_semver ((.:tag_version)))"

        echo "Installing helm"
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh

        echo "Installing fluxcd-source-controller newest version"
        install_package "fluxcd-source-controller" "fluxcd.source.controller.community.tanzu.vmware.com" $new_version

        function cleanup(){
            EXIT_CODE="$?"

            # only dump all logs if an error has occurred
            if [ ${EXIT_CODE} -ne 0 ]; then
                kubectl -n kube-system describe pods
                kubectl -n flux-system describe pods
                kubectl -n flux-system get gitrepositories -oyaml
                kubectl -n flux-system get helmrepositories -oyaml
                kubectl -n flux-system get helmcharts -oyaml
                kubectl -n flux-system get all
                kubectl -n flux-system logs deploy/source-controller
                kubectl -n minio get all
                kubectl -n minio describe pods
            else
                echo "All E2E tests passed!"
            fi

            if "${CREATE_CLUSTER}"; then
                echo "Delete cluster"
                kind delete cluster --name "${KIND_CLUSTER_NAME}"
            fi
            exit ${EXIT_CODE}
        }
        trap cleanup EXIT

        # Wait for nodes to be ready and pods to be running
        kubectl wait node "${KIND_CLUSTER_NAME}-control-plane" --for=condition=ready --timeout=2m
        kubectl wait --for=condition=ready -n kube-system -l k8s-app=kube-dns pod
        kubectl wait --for=condition=ready -n local-path-storage -l app=local-path-provisioner pod


        echo "Run smoke tests"
        kubectl -n flux-system apply -f "flux-source-controller/config/samples"
        kubectl -n flux-system rollout status deploy/source-controller --timeout=1m
        kubectl -n flux-system wait gitrepository/gitrepository-sample --for=condition=ready --timeout=1m
        kubectl -n flux-system wait helmrepository/helmrepository-sample --for=condition=ready --timeout=1m
        kubectl -n flux-system wait helmchart/helmchart-sample --for=condition=ready --timeout=1m
        kubectl -n flux-system delete -f "flux-source-controller/config/samples"

        echo "Run HelmChart values file tests"
        kubectl -n flux-system apply -f "flux-source-controller/config/testdata/helmchart-valuesfile"
        kubectl -n flux-system wait helmchart/podinfo --for=condition=ready --timeout=5m
        kubectl -n flux-system wait helmchart/podinfo-git --for=condition=ready --timeout=5m
        kubectl -n flux-system delete -f "flux-source-controller/config/testdata/helmchart-valuesfile"

        echo "Setup Minio"
        kubectl create ns minio
        helm repo add minio https://helm.min.io/ --force-update
        helm upgrade minio minio/minio --wait -i \
            --version "${MINIO_HELM_VER}" \
            --namespace minio \
            --set accessKey=myaccesskey \
            --set secretKey=mysecretkey \
            --set resources.requests.memory=128Mi \
            --set persistence.enable=false \
            --set image.tag="${MINIO_TAG}" \
            --set image.repository=harbor-repo.vmware.com/dockerhub-proxy-cache/minio/minio \
            --set mcImage.repository=harbor-repo.vmware.com/dockerhub-proxy-cache/minio/mc \
            --set helmKubectlJqImage.repository=harbor-repo.vmware.com/dockerhub-proxy-cache/bskim45/helm-kubectl-jq
        kubectl -n minio port-forward svc/minio 9000:9000 &>/dev/null &

        sleep 2

        if [ ! -f "${BUILD_DIR}/mc" ]; then
            MC_SHA256="${MC_AMD64_SHA256}"
            ARCH="amd64"
            if [ "${BUILD_PLATFORM}" = "linux/arm64" ]; then
                MC_SHA256="${MC_ARM64_SHA256}"
                ARCH="arm64"
            fi

            mkdir -p "${BUILD_DIR}"
            curl -o "${BUILD_DIR}/mc" -LO "https://dl.min.io/client/mc/release/linux-${ARCH}/archive/${MC_RELEASE}"
            if ! echo "${MC_SHA256}  ${BUILD_DIR}/mc" | sha256sum --check; then
                echo "Checksum failed for mc."
                rm "${BUILD_DIR}/mc"
                exit 1
            fi

            chmod +x "${BUILD_DIR}/mc"
        fi

        "${BUILD_DIR}/mc" alias set minio http://localhost:9000 myaccesskey mysecretkey --api S3v4
        kubectl -n flux-system apply -f "flux-source-controller/config/testdata/minio/secret.yaml"

        echo "Run Bucket tests"
        "${BUILD_DIR}/mc" mb minio/podinfo
        "${BUILD_DIR}/mc" mirror "flux-source-controller/config/testdata/minio/manifests/" minio/podinfo

        kubectl -n flux-system apply -f "flux-source-controller/config/testdata/bucket/source.yaml"
        kubectl -n flux-system wait bucket/podinfo --for=condition=ready --timeout=1m


        echo "Run HelmChart from Bucket tests"
        "${BUILD_DIR}/mc" mb minio/charts
        "${BUILD_DIR}/mc" mirror "flux-source-controller/controllers/testdata/charts/helmchart/" minio/charts/helmchart

        kubectl -n flux-system apply -f "flux-source-controller/config/testdata/helmchart-from-bucket/source.yaml"
        kubectl -n flux-system wait bucket/charts --for=condition=ready --timeout=1m
        kubectl -n flux-system wait helmchart/helmchart-bucket --for=condition=ready --timeout=1m

        echo "Run large Git repo tests"
        kubectl -n flux-system apply -f "flux-source-controller/config/testdata/git/large-repo.yaml"
        kubectl -n flux-system wait gitrepository/large-repo-go-git --for=condition=ready --timeout=2m15s
        kubectl -n flux-system wait gitrepository/large-repo-libgit2 --for=condition=ready --timeout=2m15s
